from django.db import models

class Profile(models.Model):
    # TODO: Replace Charfields with more appropriate choice after data cleaning
    player_id = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=50, null=True)
    position = models.CharField(max_length=2, null=True)
    height = models.CharField(max_length=4, null=True)
    weight = models.IntegerField(null=True)
    current_team = models.CharField(max_length=3, null=True)
    birth_date = models.CharField(max_length=10, null=True)
    birth_place = models.CharField(max_length=50, null=True)
    death_date = models.CharField(max_length=10, null=True)
    college = models.CharField(max_length=30, null=True)
    high_school = models.CharField(max_length=30, null=True)
    draft_team = models.CharField(max_length=3, null=True)
    draft_round = models.IntegerField(null=True)
    draft_position = models.IntegerField(null=True)
    draft_year = models.CharField(max_length=4, null=True)
    current_salary = models.CharField(max_length=9, null=True)
    hof_induction_year = models.CharField(max_length=10, null=True)

    def __str__(self):
        return "{} - {}".format(self.player_id, self.name)

class Game(models.Model):
    player_id = models.ForeignKey('Profile', on_delete=models.CASCADE)
    year = models.CharField(max_length=4)
    game_id = models.CharField(max_length=12, primary_key=True)
    date = models.DateField()
    game_number = models.IntegerField()
    age = models.CharField(max_length=6)
    team = models.CharField(max_length=3)
    game_location = models.CharField(max_length=30)
    opponent = models.CharField(max_length=3)
    game_won = models.BooleanField()
    player_team_score = models.IntegerField()
    opponent_score = models.IntegerField()
    passing_attempts = models.IntegerField()
    passing_completions = models.IntegerField()
    passing_yards = models.IntegerField()
    passing_rating = models.IntegerField()
    passing_touchdowns = models.IntegerField()
    passing_interceptions = models.IntegerField()
    passing_sacks = models.IntegerField()
    passing_sacks_yards_lost = models.IntegerField()
    rushing_attempts = models.IntegerField()
    rushing_yards = models.IntegerField()
    rushing_touchdowns = models.IntegerField()
    receiving_targets = models.IntegerField()
    receiving_receptions = models.IntegerField()
    receiving_yards = models.IntegerField()
    receiving_touchdowns = models.IntegerField()
    kick_return_attempts = models.IntegerField()
    kick_return_yards = models.IntegerField()
    kick_return_touchdowns = models.IntegerField()
    punt_return_attempts = models.IntegerField()
    punt_return_yards = models.IntegerField()
    punt_return_touchdowns = models.IntegerField()
    defense_sacks = models.IntegerField()
    defense_tackles = models.IntegerField()
    defense_tackle_assists = models.IntegerField()
    defense_interceptions = models.IntegerField()
    defense_interception_yards = models.IntegerField()
    defense_interception_touchdowns = models.IntegerField()
    defense_safeties = models.IntegerField()
    point_after_attemps = models.IntegerField()
    point_after_makes = models.IntegerField()
    field_goal_attempts = models.IntegerField()
    field_goal_makes = models.IntegerField()
    punting_attempts = models.IntegerField()
    punting_yards = models.IntegerField()
    punting_blocked = models.IntegerField()

    def __str__(self):
        return '{}: {} vs. {} {}'.format(self.game_id, self.team,
                self.opponent, self.date)
